import 'express-async-errors';
import { NextFunction, Request, Response } from 'express';

const globalErrorHandler = (err: any, req: Request, res: Response, next: NextFunction) => {
  err.statusCode = err.statusCode || 500;
  err.status = err.status || 'Internal Server Error';

  /* Errors that are not generated by us but should be operational. */
  if (
    err.code === 'P2002' ||
    // err.name === 'CastError' ||
    err.name === 'ValidationError' ||
    err.name === 'JsonWebTokenError' ||
    err.name === 'TokenExpiredError' ||
    err.name === 'UnauthorizedError'
  )
    err.isOperational = true;

  /* 1. Production. */
  if (process.env.NODE_ENV == 'production') {
    console.error('⚠️ ', err);

    if (err.code === 'P2002') {
      const values: string[] = err.meta.target;
      err.message = `Duplicate field values: ${values.toString()} `;
    }

    if (err.name === 'JsonWebTokenError') {
      err.message = 'User authentication failed.';
    }

    if (err.name === 'TokenExpiredError') {
      err.message = 'User authentication token is expired.';
    }

    /* 1.1. Operational (generated by us). */
    if (err.isOperational) {
      return res.status(err.statusCode).json({
        status: err.status,
        success: false,
        message: err.message,
      });
    }

    /* 1.2. Not operational (not generated by us). */
    if (!err.isOperational) {
      return res.status(500).json({
        status: 'error',
        success: false,
        message: 'Something went wrong.',
      });
    }
  } else {
    /* 2. Development and others. */
    return res.status(err.statusCode).json({
      status: err.status,
      message: err.message,
      success: false,
      error: { ...err, stack: err.stack },
    });
  }
};

export default globalErrorHandler;
